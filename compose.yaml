services:
  postgres:
    image: postgres:latest
    container_name: postgres_db
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      # Performance tuning
      POSTGRES_INITDB_ARGS: "--data-checksums"
      # PostgreSQL configurations
      POSTGRES_MAX_CONNECTIONS: ${POSTGRES_MAX_CONNECTIONS:-200}
      POSTGRES_SHARED_BUFFERS: ${POSTGRES_SHARED_BUFFERS:-128MB}
      POSTGRES_WORK_MEM: ${POSTGRES_WORK_MEM:-16MB}
      POSTGRES_EFFECTIVE_CACHE_SIZE: ${POSTGRES_EFFECTIVE_CACHE_SIZE:-4GB}
      # Deadlock prevention
      POSTGRES_DEADLOCK_TIMEOUT: ${POSTGRES_DEADLOCK_TIMEOUT:-2000}
      POSTGRES_MAX_LOCKS_PER_TRANSACTION: ${POSTGRES_MAX_LOCKS_PER_TRANSACTION:-128}
      POSTGRES_MAX_PRED_LOCKS_PER_TRANSACTION: ${POSTGRES_MAX_PRED_LOCKS_PER_TRANSACTION:-128}
      POSTGRES_DEFAULT_TRANSACTION_ISOLATION: ${POSTGRES_DEFAULT_TRANSACTION_ISOLATION:-read committed}
      POSTGRES_IDLE_IN_TRANSACTION_TIMEOUT: ${POSTGRES_IDLE_IN_TRANSACTION_TIMEOUT:-30s}
      POSTGRES_STATEMENT_TIMEOUT: ${POSTGRES_STATEMENT_TIMEOUT:-300s}
      POSTGRES_LOCK_TIMEOUT: ${POSTGRES_LOCK_TIMEOUT:-10s}
      # Logging configuration
      POSTGRES_LOG_MIN_DURATION_STATEMENT: ${POSTGRES_LOG_MIN_DURATION_STATEMENT:--1}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - ${POSTGRESQL_DATA_PATH}:/var/lib/postgresql/data
      # Mount custom PostgreSQL configuration
      - ./pg_configs:/etc/postgresql/conf.d
    networks:
      - postgres-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
  postgres-maintenance:
      image: postgres:latest
      container_name: postgres_maintenance
      restart: always
      command: >
        bash -c "
          while true; do
            sleep ${MAINTENANCE_INTERVAL:-86400};  # Run daily by default
            PGPASSWORD=$$POSTGRES_PASSWORD psql -h postgres -U $$POSTGRES_USER -d $$POSTGRES_DB -c 'VACUUM ANALYZE;';
            echo 'Database maintenance completed';
          done
        "
      environment:
        POSTGRES_USER: ${POSTGRES_USER}
        POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        POSTGRES_DB: ${POSTGRES_DB}
        MAINTENANCE_INTERVAL: ${MAINTENANCE_INTERVAL:-86400}
      networks:
        - postgres-network
      depends_on:
        postgres:
          condition: service_healthy

  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      # Additional pgAdmin configurations
      PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION: 'True'
      PGADMIN_CONFIG_LOGIN_BANNER: "'Authorized users only!'"
      PGADMIN_CONFIG_CONSOLE_LOG_LEVEL: 30
    ports:
      - "${PGADMIN_PORT}:80"
    volumes:
      - ${PGADMIN_DATA_PATH}:/var/lib/pgadmin
      # Pre-configured servers
      - ./pgadmin-servers.json:/pgadmin4/servers.json
    networks:
      - postgres-network
    depends_on:
      postgres:
        condition: service_healthy

  # Backup service
  postgres-backup:
    image: prodrigestivill/postgres-backup-local:latest
    container_name: postgres_backup
    restart: always
    volumes:
      - ${BACKUP_PATH}:/backups
    environment:
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SCHEDULE: ${BACKUP_SCHEDULE:-@daily}
      BACKUP_KEEP_DAYS: ${BACKUP_KEEP_DAYS:-7}
      BACKUP_KEEP_WEEKS: ${BACKUP_KEEP_WEEKS:-4}
      BACKUP_KEEP_MONTHS: ${BACKUP_KEEP_MONTHS:-6}
      HEALTHCHECK_PORT: 8080
    networks:
      - postgres-network
    depends_on:
      postgres:
        condition: service_healthy

networks:
  postgres-network:
    driver: bridge
    name: postgres-network